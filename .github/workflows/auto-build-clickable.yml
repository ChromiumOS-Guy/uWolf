name: Monitor GitLab Tag and Create Alpha Release

on:
  schedule:
    - cron: '0 0 */3 * *' # Runs every 3 days at midnight (00:00) UTC
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  check-and-release:
    runs-on: ubuntu-latest # Uses a GitHub-hosted runner with Ubuntu
    container: clickable/ci-20.04-arm64 # Specifies the Docker image for the job to run inside

    # Permissions required for creating releases and tags, AND pushing back to repo (if auto-increment is used)
    permissions:
      contents: write # Needed for softprops/action-gh-release AND for git push (if manifest is updated)

    steps:
      - name: Install Utilities (jq, curl, git)
        run: |
          apt-get update
          apt-get install -y jq curl git

      - name: Configure Git for Auto-Commit (if needed)
        # This is necessary if we're going to push changes back to the repo (e.g., auto-increment manifest.json)
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Get latest LibreWolf tag from GitLab (Following Redirects)
        id: get_gitlab_tag
        run: |
          GITLAB_PROJECT_ID="24386000"
          GITLAB_PERMALINK_URL="https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases/permalink/latest"

          echo "Attempting to fetch latest LibreWolf tag via permalink: $GITLAB_PERMALINK_URL"

          EFFECTIVE_URL=$(curl -s -L -o /dev/null -w '%{url_effective}' "$GITLAB_PERMALINK_URL")

          echo "Effective (redirected) URL: $EFFECTIVE_URL"

          if [ -z "$EFFECTIVE_URL" ]; then
            echo "Error: Could not retrieve effective URL from GitLab permalink. No redirect happened or curl failed."
            echo "gitlab_tag=v0.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract the LibreWolf tag (e.g., v138.0.4-1)
          GITLAB_TAG=$(basename "$EFFECTIVE_URL")

          if [ -z "$GITLAB_TAG" ]; then
            echo "Error: Could not extract tag from the effective URL: $EFFECTIVE_URL"
            echo "gitlab_tag=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "Latest LibreWolf Tag: $GITLAB_TAG"
            echo "gitlab_tag=$GITLAB_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Get latest uWolf App Tag from GitHub
        id: get_github_app_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GITHUB_API_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          echo "Fetching latest uWolf app release tag from: $GITHUB_API_URL"
          GITHUB_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$GITHUB_API_URL")

          LATEST_GITHUB_APP_TAG=""

          if echo "$GITHUB_RESPONSE" | jq -e 'has("message") and .message == "Not Found"' >/dev/null; then
            echo "No existing GitHub releases found in this repository."
            LATEST_GITHUB_APP_TAG="v0.0.0" # Baseline for comparison
          else
            LATEST_GITHUB_APP_TAG=$(echo "$GITHUB_RESPONSE" | jq -r '.tag_name // empty')
            if [ -z "$LATEST_GITHUB_APP_TAG" ]; then
              echo "Error: Could not extract tag_name from GitHub API response. Assuming v0.0.0"
              echo "Response: $GITHUB_RESPONSE"
              LATEST_GITHUB_APP_TAG="v0.0.0" # Fallback
            fi
          fi

          echo "Latest GitHub uWolf App Tag: $LATEST_GITHUB_APP_TAG"
          echo "github_app_tag=$LATEST_GITHUB_APP_TAG" >> $GITHUB_OUTPUT # Renamed output for clarity


      - name: Checkout repository and submodules
        # We need to checkout unconditionally because we always read manifest.json
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }} # Needed for potential manifest.json push

      - name: Get Current uWolf App Version from manifest.json
        id: get_current_app_version
        run: |
          if [ -f manifest.json ]; then
            CURRENT_APP_VERSION=$(jq -r '.version' manifest.json)
            if [ -z "$CURRENT_APP_VERSION" ] || [ "$CURRENT_APP_VERSION" == "null" ]; then
              echo "Warning: Could not extract version from manifest.json. Defaulting to 0.0.0."
              CURRENT_APP_VERSION="0.0.0"
            fi
            echo "Current uWolf App Version from manifest.json: $CURRENT_APP_VERSION"
          else
            echo "Error: manifest.json not found in repository root. Defaulting to 0.0.0."
            CURRENT_APP_VERSION="0.0.0"
          fi
          echo "current_app_version=$CURRENT_APP_VERSION" >> $GITHUB_OUTPUT


      - name: Determine New Release Version and Build Trigger
        id: determine_release_info
        run: |
          GITLAB_TAG="${{ steps.get_gitlab_tag.outputs.gitlab_tag }}"
          LAST_RELEASED_APP_TAG="${{ steps.get_github_app_tag.outputs.github_app_tag }}" # This is our last released tag (e.g., v0.2.3)
          CURRENT_APP_VERSION_RAW="${{ steps.get_current_app_version.outputs.current_app_version }}" # 0.2.3
          CURRENT_APP_VERSION_WITH_V="v$CURRENT_APP_VERSION_RAW" # v0.2.3

          NEW_RELEASE_TAG="" # The tag we will actually use for the new GitHub Release
          SHOULD_BUILD=false
          COMMIT_MANIFEST_REQUIRED=false # Set to true if we increment manifest.json

          echo "Incoming LibreWolf Tag: $GITLAB_TAG"
          echo "Last Released uWolf App Tag: $LAST_RELEASED_APP_TAG"
          echo "Current uWolf App Version from manifest.json: $CURRENT_APP_VERSION_WITH_V"

          # Ensure tags are not empty for comparison
          if [ -z "$GITLAB_TAG" ]; then GITLAB_TAG="v0.0.0"; fi
          if [ -z "$LAST_RELEASED_APP_TAG" ]; then LAST_RELEASED_APP_TAG="v0.0.0"; fi
          if [ -z "$CURRENT_APP_VERSION_WITH_V" ]; then CURRENT_APP_VERSION_WITH_V="v0.0.0"; fi


          # 1. Check if LibreWolf has a newer version
          # Compare current GitLab_TAG with LAST_RELEASED_APP_TAG (as a proxy for the last LibreWolf base)
          # A more precise check would involve storing the *last LibreWolf tag* that was processed in a separate file/artifact.
          # For now, we'll assume if LibreWolf tag is newer than our *last released app tag*, it's a new upstream build.
          HIGHEST_OF_UPSTREAM_AND_OUR_LAST_TAG=$(printf "%s\n%s" "$GITLAB_TAG" "$LAST_RELEASED_APP_TAG" | sort -V | tail -n 1)
          
          NEWER_LIBREWOLF_AVAILABLE=false
          if [ "$GITLAB_TAG" = "$HIGHEST_OF_UPSTREAM_AND_OUR_LAST_TAG" ] && [ "$GITLAB_TAG" != "$LAST_RELEASED_APP_TAG" ]; then
             NEWER_LIBREWOLF_AVAILABLE=true
             echo "Condition: Newer LibreWolf upstream version detected: $GITLAB_TAG"
          else
             echo "Condition: No newer LibreWolf upstream compared to last app tag."
          fi

          # 2. Check if our manifest.json version has been updated manually
          APP_VERSION_UPDATED_MANUALLY=false
          if [ "$CURRENT_APP_VERSION_WITH_V" != "$LAST_RELEASED_APP_TAG" ]; then
            APP_VERSION_UPDATED_MANUALLY=true
            echo "Condition: Current uWolf App Version in manifest.json ($CURRENT_APP_VERSION_WITH_V) differs from last released ($LAST_RELEASED_APP_TAG)."
          else
            echo "Condition: Current uWolf App Version is same as last released."
          fi

          # Decision Logic
          if [ "$NEWER_LIBREWOLF_AVAILABLE" = true ]; then
            SHOULD_BUILD=true
            echo "Reason to build: Newer LibreWolf upstream version available."

            # If our current app version is already the same as the last released one,
            # we need to make the new release tag unique.
            if [ "$CURRENT_APP_VERSION_WITH_V" = "$LAST_RELEASED_APP_TAG" ]; then
              echo "  Current uWolf App Version ($CURRENT_APP_VERSION_WITH_V) is already released."
              echo "  Generating a unique tag: [AppVersion]_[LibreWolfVersion]"
              NEW_RELEASE_TAG="${CURRENT_APP_VERSION_WITH_V}_lw${GITLAB_TAG#v}" # e.g., v0.2.3_lw139.0.0-1
              # No manifest.json update here, just the release tag.
            else
              # App version has been manually updated, use that as the tag
              NEW_RELEASE_TAG="$CURRENT_APP_VERSION_WITH_V"
              echo "  Current uWolf App Version ($CURRENT_APP_VERSION_WITH_V) will be used as release tag."
            fi
          elif [ "$APP_VERSION_UPDATED_MANUALLY" = true ]; then
            SHOULD_BUILD=true
            echo "Reason to build: uWolf App Version in manifest.json has been manually updated."
            NEW_RELEASE_TAG="$CURRENT_APP_VERSION_WITH_V"
          else
            echo "No reason to build: No new LibreWolf upstream, and current uWolf App Version is already released."
            NEW_RELEASE_TAG="$LAST_RELEASED_APP_TAG" # Default to last released if no build
          fi

          echo "Final Decision - Should Build: $SHOULD_BUILD"
          echo "Proposed New Release Tag: $NEW_RELEASE_TAG"
          echo "Commit manifest.json Required: $COMMIT_MANIFEST_REQUIRED" # Will always be false with this logic

          echo "run_clickable=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "new_release_tag=$NEW_RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "commit_required=$COMMIT_MANIFEST_REQUIRED" >> $GITHUB_OUTPUT # This output will always be false now.


      # Removed the "Update manifest.json if patch incremented" step entirely,
      # as we are no longer auto-incrementing manifest.json and pushing it.
      # Instead, we make the *release tag* unique.

      - name: Build Click package for arm64
        if: steps.determine_release_info.outputs.run_clickable == 'true'
        run: clickable build --arch arm64 --skip-review

      - name: Upload Click package artifacts (for workflow run)
        if: steps.determine_release_info.outputs.run_clickable == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: click-packages-arm64-${{ steps.determine_release_info.outputs.new_release_tag }}
          path: build/*/app/*.click
          retention-days: 7

      - name: Create Alpha Release
        if: steps.determine_release_info.outputs.run_clickable == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_release_info.outputs.new_release_tag }}
          name: Alpha ${{ steps.determine_release_info.outputs.new_release_tag }}
          body: |
            Automated **Alpha Release** for version `${{ steps.determine_release_info.outputs.new_release_tag }}`.
            
            This build is based on **LibreWolf version**: `${{ steps.get_gitlab_tag.outputs.gitlab_tag }}`.
            
            This is an automated build and may contain the latest changes.
            
            ---
            *Built by GitHub Actions*
          prerelease: true
          draft: false
          files: build/*/app/*.click
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}