name: Monitor LibreWolf and Create Release

on:
  schedule:
    - cron: '0 0 */3 * *' # Runs every 3 days at midnight (00:00) UTC
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  check-and-release:
    runs-on: ubuntu-latest # Uses a GitHub-hosted runner with Ubuntu
    container: clickable/ci-20.04-arm64 # Specifies the Docker image for the job to run inside

    # Permissions required for creating releases and tags, AND pushing back to repo (if auto-increment is used)
    permissions:
      contents: write # Needed for softprops/action-gh-release AND for git push (if manifest is updated)

    steps:
      - name: Install Utilities (jq, curl, git)
        run: |
          apt-get update
          apt-get install -y jq curl git

      - name: Configure Git for Auto-Commit and Safe Directory
        # This is necessary if we're going to push changes back to the repo (e.g., auto-increment manifest.json)
        # And to fix dubious ownership errors in container environments.
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global --add safe.directory /__w/uWolf/uWolf # <-- ADDED THIS LINE

      - name: Checkout repository and submodules
        # We need to checkout unconditionally because we always read manifest.json and .last_librewolf_tag
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }} # Needed for pushing back changes

      - name: Get latest LibreWolf tag from GitLab (Following Redirects)
        id: get_gitlab_tag
        run: |
          # Enable strict error checking and command tracing for debugging
          set -eux

          GITLAB_PROJECT_ID="24386000"
          GITLAB_PERMALINK_URL="https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases/permalink/latest"

          echo "Attempting to fetch latest LibreWolf tag via permalink: $GITLAB_PERMALINK_URL"
          EFFECTIVE_URL=$(curl -s -L -o /dev/null -w '%{url_effective}' "$GITLAB_PERMALINK_URL")
          echo "Effective (redirected) URL: $EFFECTIVE_URL"

          if [ -z "$EFFECTIVE_URL" ]; then
            echo "Error: Could not retrieve effective URL from GitLab permalink. No redirect happened or curl failed."
            echo "gitlab_tag=v0.0.0" >> "$GITHUB_OUTPUT"
          else
            GITLAB_TAG=$(basename "$EFFECTIVE_URL")
            if [ -z "$GITLAB_TAG" ]; then
              echo "Error: Could not extract tag from the effective URL: $EFFECTIVE_URL"
              echo "gitlab_tag=v0.0.0" >> "$GITHUB_OUTPUT"
            else
              echo "Latest LibreWolf Tag: $GITLAB_TAG"
              echo "gitlab_tag=$GITLAB_TAG" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Get Last Processed LibreWolf Tag (from .last_librewolf_tag file)
        id: get_last_processed_lw_tag
        run: |
          set -eux
          LAST_PROCESSED_LW_TAG="v0.0.0"
          if [ -f .last_librewolf_tag ]; then
            LAST_PROCESSED_LW_TAG=$(cat .last_librewolf_tag | tr -d '\n') # Remove newline
            echo "Found .last_librewolf_tag file: $LAST_PROCESSED_LW_TAG"
          else
            echo "No .last_librewolf_tag file found. Initializing to v0.0.0"
          fi
          echo "last_processed_lw_tag=$LAST_PROCESSED_LW_TAG" >> "$GITHUB_OUTPUT"

      - name: Get latest uWolf App Tag from GitHub (simplified grep/sed)
        id: get_github_app_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GITHUB_API_URL="https://api.github.com/repos/ChromiumOS-Guy/uWolf/releases/latest"
          echo "Fetching latest uWolf app release tag from: $GITHUB_API_URL"

          # Capture the full curl response. Redirect stderr to /dev/null to avoid extraneous messages.
          # The -s (silent) option already suppresses progress meter and error messages.
          FULL_CURL_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$GITHUB_API_URL" 2>/dev/null)

          LATEST_GITHUB_APP_TAG="v0.0.0" # Baseline for comparison

          # Check if the full response contains the "Not Found" message from GitHub API
          # Use grep -q (quiet) to just check for existence without printing.
          if echo "$FULL_CURL_RESPONSE" | grep -q '"message": "Not Found"'; then
            echo "No existing GitHub releases found in this repository or API returned 'Not Found'."
            # LATEST_GITHUB_APP_TAG remains v0.0.0
          else
            # If "Not Found" is not present, proceed to extract the tag_name
            # Use the pipeline: echo (full response) | grep | sed
            extracted_tag=$(echo "$FULL_CURL_RESPONSE" | grep '"tag_name":' | sed -n 's/.*"tag_name": "\(.*\)".*/\1/p')

            if [ -z "$extracted_tag" ]; then
              echo "Error: Could not extract tag_name using grep/sed. Assuming v0.0.0"
              echo "Full Response for debugging:"
              echo "$FULL_CURL_RESPONSE" # Print the full response if extraction fails
              # LATEST_GITHUB_APP_TAG remains v0.0.0
            else
              LATEST_GITHUB_APP_TAG="$extracted_tag"
            fi
          fi

          echo "Latest GitHub uWolf App Tag: $LATEST_GITHUB_APP_TAG"
          echo "github_app_tag=$LATEST_GITHUB_APP_TAG" >> $GITHUB_OUTPUT # Set output for other steps

      - name: Get Current uWolf App Version from manifest.json
        id: get_current_app_version
        run: |
          set -eux
          CURRENT_APP_VERSION="0.0.0" # Default baseline
          if [ -f manifest.json ]; then
            CURRENT_APP_VERSION=$(jq -r '.version' manifest.json)
            if [ -z "$CURRENT_APP_VERSION" ] || [ "$CURRENT_APP_VERSION" = "null" ]; then
              echo "Warning: Could not extract version from manifest.json. Defaulting to 0.0.0."
              CURRENT_APP_VERSION="0.0.0"
            fi
            echo "Current uWolf App Version from manifest.json: $CURRENT_APP_VERSION"
          else
            echo "Error: manifest.json not found in repository root. Defaulting to 0.0.0."
            CURRENT_APP_VERSION="0.0.0"
          fi
          echo "current_app_version=$CURRENT_APP_VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine New Release Version and Build Trigger
        id: determine_build_info
        run: |
          set -eux 

          GITLAB_TAG="${{ steps.get_gitlab_tag.outputs.gitlab_tag }}"
          LAST_PROCESSED_LW_TAG="${{ steps.get_last_processed_lw_tag.outputs.last_processed_lw_tag }}"
          LAST_RELEASED_APP_TAG="${{ steps.get_github_app_tag.outputs.github_app_tag }}"
          CURRENT_APP_VERSION_RAW="${{ steps.get_current_app_version.outputs.current_app_version }}"
          CURRENT_APP_VERSION_WITH_V="v$CURRENT_APP_VERSION_RAW"

          NEW_UWOOLF_APP_VERSION_RAW="$CURRENT_APP_VERSION_RAW"
          SHOULD_BUILD_FLAG=0
          COMMIT_REQUIRED_FLAG=0

          echo "Incoming LibreWolf Tag: $GITLAB_TAG"
          echo "Last Processed LibreWolf Tag: $LAST_PROCESSED_LW_TAG"
          echo "Current uWolf App Version (from manifest): $CURRENT_APP_VERSION_WITH_V"
          echo "Last Released uWolf App Tag (from GitHub releases): $LAST_RELEASED_APP_TAG"

          [ -z "$GITLAB_TAG" ] && GITLAB_TAG="v0.0.0"
          [ -z "$LAST_PROCESSED_LW_TAG" ] && LAST_PROCESSED_LW_TAG="v0.0.0"
          [ -z "$LAST_RELEASED_APP_TAG" ] && LAST_RELEASED_APP_TAG="v0.0.0"
          [ -z "$CURRENT_APP_VERSION_WITH_V" ] && CURRENT_APP_VERSION_WITH_V="v0.0.0"

          NEWER_LIBREWOLF_AVAILABLE_FLAG=0
          HIGHEST_LW_OF_TWO=$(printf "%s\n%s" "$LAST_PROCESSED_LW_TAG" "$GITLAB_TAG" | sort -V | tail -n 1)
          if [ "$GITLAB_TAG" = "$HIGHEST_LW_OF_TWO" ] && [ "$GITLAB_TAG" != "$LAST_PROCESSED_LW_TAG" ]; then
              NEWER_LIBREWOLF_AVAILABLE_FLAG=1
              echo "Condition 1: Newer LibreWolf upstream version detected: $GITLAB_TAG"
          else
              echo "Condition 1: No newer LibreWolf upstream."
          fi

          UWOOLF_MANIFEST_VERSION_UPDATED_FLAG=0
          if [ "$CURRENT_APP_VERSION_WITH_V" != "$LAST_RELEASED_APP_TAG" ]; then
            UWOOLF_MANIFEST_VERSION_UPDATED_FLAG=1
            echo "Condition 2: Current uWolf App Version in manifest.json ($CURRENT_APP_VERSION_WITH_V) differs from last released ($LAST_RELEASED_APP_TAG)."
          else
            echo "Condition 2: Current uWolf App Version is same as last released."
          fi

          if [ "$NEWER_LIBREWOLF_AVAILABLE_FLAG" -eq 1 ]; then
            SHOULD_BUILD_FLAG=1
            echo "Reason to build: Newer LibreWolf version is available ($GITLAB_TAG)."
            if [ "$CURRENT_APP_VERSION_WITH_V" = "$LAST_RELEASED_APP_TAG" ]; then
              echo "  Current uWolf App Version ($CURRENT_APP_VERSION_WITH_V) is already used for a release."
              echo "  Incrementing patch for a new build based on LibreWolf update."
              echo "$CURRENT_APP_VERSION_RAW" | IFS='.' read -r MAJOR MINOR PATCH
              NEW_PATCH=$((PATCH + 1))
              NEW_UWOOLF_APP_VERSION_RAW="$MAJOR.$MINOR.$NEW_PATCH"
              COMMIT_REQUIRED_FLAG=1
              echo "  New proposed uWolf App Version (raw): $NEW_UWOOLF_APP_VERSION_RAW"
            else
              echo "  Current uWolf App Version ($CURRENT_APP_VERSION_WITH_V) was manually updated. No patch increment needed."
            fi
          elif [ "$UWOOLF_MANIFEST_VERSION_UPDATED_FLAG" -eq 1 ]; then
            SHOULD_BUILD_FLAG=1
            echo "Reason to build: uWolf manifest.json version was manually updated ($CURRENT_APP_VERSION_WITH_V)."
          else
            echo "No reason to build: No new LibreWolf, and current uWolf App Version is already released."
          fi

          echo "Final Decision - Should Build: $( [ "$SHOULD_BUILD_FLAG" -eq 1 ] && echo "true" || echo "false" )"
          echo "Final Proposed uWolf App Version (raw): $NEW_UWOOLF_APP_VERSION_RAW"
          echo "Commit manifest.json and .last_librewolf_tag required: $( [ "$COMMIT_REQUIRED_FLAG" -eq 1 ] && echo "true" || echo "false" )"

          echo "run_clickable=$( [ "$SHOULD_BUILD_FLAG" -eq 1 ] && echo "true" || echo "false" )" >> "$GITHUB_OUTPUT"
          echo "new_uwolf_app_version_tag=v$NEW_UWOOLF_APP_VERSION_RAW" >> "$GITHUB_OUTPUT"
          echo "commit_required=$( [ "$COMMIT_REQUIRED_FLAG" -eq 1 ] && echo "true" || echo "false" )" >> "$GITHUB_OUTPUT"
          echo "current_lw_tag_for_this_build=$GITLAB_TAG" >> "$GITHUB_OUTPUT"

      - name: Debug Workflow Outputs
        run: |
          echo "Debugging outputs from determine_build_info step:"
          echo "run_clickable: ${{ steps.determine_build_info.outputs.run_clickable }}"
          echo "new_uwolf_app_version_tag: ${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}"
          echo "commit_required: ${{ steps.determine_build_info.outputs.commit_required }}"
          echo "current_lw_tag_for_this_build: ${{ steps.determine_build_info.outputs.current_lw_tag_for_this_build }}"
          echo "--- End Debug ---"

      - name: Update manifest.json and .last_librewolf_tag file (if required)
        if: ${{ steps.determine_build_info.outputs.commit_required == 'true' || steps.determine_build_info.outputs.run_clickable == 'true' }}
        run: |
          set -eux

          NEW_UWOOLF_APP_VERSION_RAW="${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}"
          NEW_UWOOLF_APP_VERSION_MANIFEST="${NEW_UWOOLF_APP_VERSION_RAW#v}" 
          CURRENT_LW_TAG_FOR_THIS_BUILD="${{ steps.determine_build_info.outputs.current_lw_tag_for_this_build }}"

          if [ "${{ steps.determine_build_info.outputs.commit_required }}" = "true" ]; then
            echo "Updating manifest.json to version $NEW_UWOOLF_APP_VERSION_MANIFEST"
            jq ".version = \"$NEW_UWOOLF_APP_VERSION_MANIFEST\"" manifest.json > manifest.json.tmp && mv manifest.json.tmp manifest.json
            git add manifest.json
          else
            echo "No manifest.json version update required (commit_required was false)."
          fi

          echo "Updating .last_librewolf_tag to $CURRENT_LW_TAG_FOR_THIS_BUILD"
          echo "$CURRENT_LW_TAG_FOR_THIS_BUILD" > .last_librewolf_tag
          git add .last_librewolf_tag

          if ! git diff --cached --quiet --exit-code; then # Check staged changes
            echo "Changes detected. Committing now."
            git commit -am "chore: Automated update for uWolf version to $NEW_UWOOLF_APP_VERSION_MANIFEST (LibreWolf $CURRENT_LW_TAG_FOR_THIS_BUILD)"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Build Click package for arm64
        if: ${{ steps.determine_build_info.outputs.run_clickable == 'true' }}
        run: clickable build --arch arm64 --skip-review

      - name: Upload Click package artifacts (for workflow run)
        if: ${{ steps.determine_build_info.outputs.run_clickable == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: click-packages-arm64-${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}
          path: build/*/app/*.click
          retention-days: 7

      - name: Create Alpha Release
        if: ${{ steps.determine_build_info.outputs.run_clickable == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}
          name: Alpha uWolf ${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}
          body: |
            Automated **Alpha Release** for uWolf version `${{ steps.determine_build_info.outputs.new_uwolf_app_version_tag }}`.
            
            This build is based on **LibreWolf version**: `${{ steps.get_gitlab_tag.outputs.gitlab_tag }}`.
            
            ---
            *Built by GitHub Actions*
          prerelease: false
          draft: false
          files: build/*/app/*.click
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}